{"ast":null,"code":"import { makeAutoObservable } from 'mobx';\n\nclass CanvasState {\n  constructor() {\n    this.canvas = null;\n    this.socket = null;\n    this.sessionId = null;\n    this.undoList = [];\n    this.redoList = [];\n    this.username = '';\n    makeAutoObservable(this);\n  }\n\n  setCanvas(canvas) {\n    this.canvas = canvas;\n  }\n\n  setSocket(socket) {\n    this.socket = socket;\n  }\n\n  setSessionId(sessionid) {\n    this.sessionId = sessionid;\n  }\n\n  setUserName(username) {\n    this.username = username;\n  }\n\n  pushToUndo(data) {\n    this.undoList.push(data);\n  }\n\n  pushToRedo(data) {\n    this.redoList.push(data);\n  }\n\n  undo() {\n    let ctx = this.canvas.getContext('2d');\n\n    if (this.undoList) {\n      let dataURL = this.undoList.pop();\n      this.redoList.push(this.canvas.toDataURL());\n      let img = new Image();\n      img.src = dataURL;\n\n      img.onload = () => {\n        ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\n        ctx.drawImage(img, 0, 0, this.canvas.width, this.canvas.height);\n      };\n    } else {\n      ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\n    }\n  }\n\n  redo() {\n    let ctx = this.canvas.getContext('2d');\n\n    if (this.redoList) {\n      let dataURL = this.redoList.pop();\n      this.undoList.push(this.canvas.toDataURL());\n      let img = new Image();\n      img.src = dataURL;\n\n      img.onload = () => {\n        ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\n        ctx.drawImage(img, 0, 0, this.canvas.width, this.canvas.height);\n      };\n    } else {\n      ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\n    }\n  }\n\n}\n\nexport default new CanvasState();","map":{"version":3,"names":["makeAutoObservable","CanvasState","constructor","canvas","socket","sessionId","undoList","redoList","username","setCanvas","setSocket","setSessionId","sessionid","setUserName","pushToUndo","data","push","pushToRedo","undo","ctx","getContext","dataURL","pop","toDataURL","img","Image","src","onload","clearRect","width","height","drawImage","redo"],"sources":["/Users/vostrymikita/Developer/coverage/canvas/client/src/store/canvasState.js"],"sourcesContent":["import { makeAutoObservable } from 'mobx'\n\nclass CanvasState {\n\n    canvas = null\n    socket = null\n    sessionId = null\n    undoList = []\n    redoList = []\n    username = ''\n    constructor() {\n        makeAutoObservable(this)\n    }\n\n    setCanvas(canvas) {\n        this.canvas = canvas\n    }\n    setSocket(socket) {\n        this.socket = socket\n    }\n\n    setSessionId(sessionid) {\n        this.sessionId = sessionid\n    }\n\n    setUserName(username) {\n        this.username = username\n    }\n\n    pushToUndo(data) {\n        this.undoList.push(data)\n    }\n\n    pushToRedo(data) {\n        this.redoList.push(data)\n    }\n\n    undo() {\n        let ctx = this.canvas.getContext('2d')\n        if (this.undoList) {\n            let dataURL = this.undoList.pop()\n            this.redoList.push(this.canvas.toDataURL())\n            let img = new Image()\n            img.src = dataURL\n            img.onload = () => {\n                ctx.clearRect(0, 0, this.canvas.width, this.canvas.height)\n                ctx.drawImage(img, 0, 0, this.canvas.width, this.canvas.height)\n            }\n        } else {\n            ctx.clearRect(0, 0, this.canvas.width, this.canvas.height)\n        }\n    }\n\n    redo() {\n        let ctx = this.canvas.getContext('2d')\n        if (this.redoList) {\n            let dataURL = this.redoList.pop()\n            this.undoList.push(this.canvas.toDataURL())\n            let img = new Image()\n            img.src = dataURL\n            img.onload = () => {\n                ctx.clearRect(0, 0, this.canvas.width, this.canvas.height)\n                ctx.drawImage(img, 0, 0, this.canvas.width, this.canvas.height)\n\n            }\n        } else {\n            ctx.clearRect(0, 0, this.canvas.width, this.canvas.height)\n        }\n    }\n}\n\nexport default new CanvasState()"],"mappings":"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"},"metadata":{},"sourceType":"module"}